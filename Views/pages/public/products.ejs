<style>
    /* Estilos para a barra de filtro de categoria */
    .category-filter-bar {
        text-align: center;
        margin-bottom: 3rem;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.8rem;
        /* Espaçamento entre os botões */
    }

    .filter-btn {
        background-color: #fff;
        color: var(--cor-secundaria);
        border: 2px solid var(--cor-borda);
        padding: 12px 24px;
        border-radius: 25px;
        /* Bordas mais arredondadas */
        font-weight: bold;
        text-transform: uppercase;
        cursor: pointer;
        transition: all 0.3s ease;
        outline: none;
    }

    .filter-btn:hover {
        background-color: var(--cor-secundaria);
        color: #fff;
        border-color: var(--cor-secundaria);
    }

    /* Estilo do botão de filtro ativo */
    .filter-btn.active {
        background-color: var(--cor-destaque);
        color: #fff;
        border-color: var(--cor-destaque);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Animação de fade-in para os produtos */
    .product-card {
        animation: fadeIn 0.5s ease-in-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(15px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="container">
    <header class="page-header" style="text-align: center; margin-bottom: 3rem; margin-top: 1.2rem;">
        <h1>Todos os Produtos</h1>
    </header>

    <%
      // Lista de todas as categorias disponíveis
      const allCategories = ['Sala de Estar', 'Área Gourmet', 'Cozinha', 'Quarto', 'Área Externa', 'Banheiro', 'Escritório'];
      // Garante que 'items' seja um array, independentemente da origem dos dados
      const items = Array.isArray(products) ? products : (Array.isArray(allProducts) ? allProducts : []);
    %>

    <!-- Barra de Filtro de Categoria -->
    <div class="category-filter-bar">
        <button class="filter-btn active" data-category="all">Todas</button>
        <% allCategories.forEach(category => { %>
        <button class="filter-btn" data-category="<%= category %>"><%= category %></button>
        <% }); %>
    </div>

    <!-- Grid Único de Produtos -->
    <div class="product-grid">
        <% if (items.length > 0) { %>
        <% items.forEach(product => { %>
        <%
              // Extrai e formata os dados do produto
              const imagem = (product.imagens && product.imagens.length > 0) ? product.imagens[0] : '/assets/img/fallback.jpg';
              const productId = product._id || product.id || '';
              const productUrl = `/product/${productId}`;
              const preco = (product.preco != null) ? Number(product.preco).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) : 'Preço sob consulta';
              
              // Verifica se o produto está nos favoritos ou no carrinho do usuário
              const isFavorited = (session?.user?.favorites || []).map(String).includes(String(productId));
              const isInCart = (session?.user?.cart || []).map(String).includes(String(productId));

              // Define as URLs de ação (requer login)
              const favoritUrl = session?.user?._id ? `/addFavorite/${productId}` : '/login';
              const carrinhoUrl = session?.user?._id ? (isInCart ? '/cart' : `/cart/add/${productId}`) : '/login';

              // Formata as categorias do produto para o atributo de dados
              const productCategories = Array.isArray(product.categoria) ? product.categoria.join(',') : (product.categoria || '');
            %>

        <!-- Card do Produto -->
        <div class="product-card" data-categories="<%= productCategories %>">
            <div class="product-card-icons">
                <a href="<%= favoritUrl %>" class="favorite-btn <%= isFavorited ? 'favorited' : '' %>"
                    data-product-id="<%= productId %>">
                    <i class="material-icons"><%= isFavorited ? 'favorite' : 'favorite_border' %></i>
                </a>
                <a href="<%= carrinhoUrl %>" class="add-to-cart-btn <%= isInCart ? 'in-cart' : '' %>"
                    data-product-id="<%= productId %>">
                    <i class="material-icons"><%= isInCart ? 'shopping_cart_checkout' : 'shopping_cart' %></i>
                </a>
            </div>
            <a href="<%= productUrl %>" class="product-link">
                <img src="<%= imagem.startsWith('/uploads') ? imagem : '/uploads/' + imagem %>"
                    alt="<%= product.nome %>">
                <h3><%= product.nome %></h3>
                <p class="price"><%= preco %></p>
            </a>
            <a href="<%= productUrl %>" class="btn btn-secundario btn-sm" style="margin-bottom: 20px;">Ver
                Detalhes</a>
        </div>
        <% }); %>
        <% } else { %>
        <p style="text-align: center; grid-column: 1 / -1;">Nenhum produto encontrado no momento. Volte em breve!
        </p>
        <% } %>
    </div>
</div>

<div id="notification-products"
    style="display: none; position: fixed; top: 20px; right: 20px; z-index: 1050; padding: 15px; border-radius: 5px; color: white;">
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- LÓGICA DE FILTRAGEM DE PRODUTOS ---
        const filterButtons = document.querySelectorAll('.filter-btn');
        const productCards = document.querySelectorAll('.product-card');

        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Remove a classe 'active' de todos os botões
                filterButtons.forEach(btn => btn.classList.remove('active'));
                // Adiciona a classe 'active' ao botão clicado
                button.classList.add('active');

                const selectedCategory = button.dataset.category;

                productCards.forEach(card => {
                    const productCategories = card.dataset.categories.split(',');

                    if (selectedCategory === 'all' || productCategories.includes(selectedCategory)) {
                        card.style.display = 'block'; // Mostra o card
                    } else {
                        card.style.display = 'none'; // Oculta o card
                    }
                });
            });
        });

        // --- LÓGICA DE NOTIFICAÇÃO (FAVORITOS E CARRINHO) ---
        const notification = document.getElementById('notification-products');

        function showNotification(message, isSuccess) {
            notification.textContent = message;
            notification.style.backgroundColor = isSuccess ? '#28a745' : '#dc3545';
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Lógica para Favoritos
        const favoriteButtons = document.querySelectorAll('.favorite-btn');
        favoriteButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();
                const productId = button.dataset.productId;
                if (!productId) return;

                const isFavorited = button.classList.contains('favorited');
                const url = isFavorited ? `/removeFavorite/${productId}` : `/addFavorite/${productId}`;

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const result = await response.json();
                    showNotification(result.message, result.success);

                    if (result.success) {
                        button.classList.toggle('favorited');
                        const icon = button.querySelector('i');
                        icon.textContent = isFavorited ? 'favorite_border' : 'favorite';
                    }
                } catch (error) {
                    showNotification('Erro de conexão. Tente novamente.', false);
                }
            });
        });

        // Lógica para Carrinho
        const cartButtons = document.querySelectorAll('.add-to-cart-btn');
        cartButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();
                if (button.classList.contains('in-cart')) {
                    window.location.href = '/cart';
                    return;
                }

                const productId = button.dataset.productId;
                if (!productId) return;

                const url = `/cart/add/${productId}`;

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const result = await response.json();
                    showNotification(result.message, result.success);

                    if (result.success) {
                        button.classList.add('in-cart');
                        const icon = button.querySelector('i');
                        icon.textContent = 'shopping_cart_checkout';
                    }
                } catch (error) {
                    showNotification('Erro de conexão. Tente novamente.', false);
                }
            });
        });
    });
</script>