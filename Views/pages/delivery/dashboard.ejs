<style>
    :root {
        --cor-primaria-entrega: #f7f7f7;
        --cor-secundaria-entrega: #ffffff;
        --cor-destaque-entrega: #007bff;
        --cor-texto-entrega: #333;
        --cor-texto-secundario: #666;
        --cor-borda-entrega: #e0e0e0;
        --sombra-padrao: 0 6px 18px rgba(0, 0, 0, 0.06);
        --borda-radius: 12px;
    }

    .delivery-dashboard {
        display: grid;
        height: calc(100vh - 86px);
        grid-template-columns: 350px 1fr;
        gap: 1rem;
        padding: 1rem;
        background-color: var(--cor-primaria-entrega);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* --- Orders List --- */
    .orders-list-container {
        background-color: var(--cor-secundaria-entrega);
        border-radius: var(--borda-radius);
        box-shadow: var(--sombra-padrao);
        padding: 1.5em;
        overflow-y: auto;
        transition: box-shadow 0.3s ease;
    }

    .orders-list-container:hover {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    }

    .orders-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid var(--cor-borda-entrega);
        padding-bottom: 0.8rem;
        margin-bottom: 1.5rem;
    }

    .orders-list-header h2 {
        margin: 0;
        font-size: 1.3rem;
        color: var(--cor-texto-entrega);
    }

    #order-count {
        background-color: var(--cor-destaque-entrega);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .order-card {
        background-color: #fff;
        border: 1px solid var(--cor-borda-entrega);
        border-radius: var(--borda-radius);
        padding: 1.5rem;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease, border-left-color 0.2s ease;
        border-left: 1px solid var(--cor-borda-entrega);
    }

    .order-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        border-left-color: var(--cor-destaque-entrega);
    }

    .order-card.selected {
        background-color: #f0f7ff;
        border-color: var(--cor-destaque-entrega);
        border-left-width: 5px;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.15);
    }

    .order-card h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1.0rem;
        color: var(--cor-texto-entrega);
    }

    .order-card p {
        margin: 0.2rem 0;
        color: var(--cor-texto-secundario);
        font-size: 0.75rem;
    }

    .order-status {
        font-size: 0.85rem;
        font-weight: 600;
        border-radius: 15px;
        display: inline-block;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending {
        background-color: #fff0e1;
        color: #ff8c00;
    }

    .status-in-transit {
        background-color: #e6f7ff;
        color: #1890ff;
    }

    .status-delivered {
        background-color: #e6f9f0;
        color: #28a745;
    }

    /* --- Selected Order Details --- */
    .selected-order-container {
        background-color: var(--cor-secundaria-entrega);
        border-radius: var(--borda-radius);
        box-shadow: var(--sombra-padrao);
        display: flex;
        flex-direction: column;
    }

    #map-placeholder {
        width: 100%;
        height: 60%;
        background-color: #e9ecef;
        border-radius: var(--borda-radius) var(--borda-radius) 0 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: #6c757d;
    }

    #selected-order-content {
        width: 100%;
        height: 40%;
        ;
        padding: 1.2rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    #empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: var(--cor-texto-secundario);
    }

    #empty-state .material-icons {
        font-size: 2.8rem;
        margin-bottom: 1rem;
        color: #ccc;
    }

    #order-details-info h3 {
        margin-top: 0;
        font-size: 1.8rem;
        color: var(--cor-texto-entrega);
        margin-bottom: 1.5rem;
    }

    .info-grid {
        display: grid;
        grid-template-columns: 22% 25% 14% auto;
        gap: 0.8rem;
        margin-bottom: 1rem;
    }

    .info-item strong {
        display: block;
        color: #555;
        margin-bottom: 0.3rem;
        font-weight: 600;
    }

    .delivery-actions {
        margin-top: auto;
        align-items: center;
        display: flex;
        gap: 1rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--cor-borda-entrega);
    }

    .btn {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-destaque {
        background-color: var(--cor-destaque-entrega);
        color: white;
    }

    .btn-destaque:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 123, 255, 0.3);
    }

    .btn-secundario {
        background-color: #f0f0f0;
        color: #555;
        border: 1px solid #ccc;
    }

    .btn-secundario:hover {
        background-color: #e0e0e0;
        border-color: #bbb;
    }

    /* --- Responsiveness --- */
    @media (max-width: 1200px) {
        .delivery-dashboard {
            grid-template-columns: 1fr;
            height: auto;
            padding: 1.5rem;
        }

        .orders-list-container {
            max-height: 45vh;
        }
    }
</style>

<div class="delivery-dashboard">

    <!-- Coluna da Lista de Pedidos -->
    <div class="orders-list-container">
        <div class="orders-list-header">
            <h2>Pedidos de Entrega</h2>
            <span id="order-count">
                <%= orders.length %>
            </span>
        </div>
        <div id="order-list">
            <% if (orders.length===0) { %>
                <p>Nenhum pedido disponível no momento.</p>
                <% } else { %>
                    <% orders.forEach(order=> { %>
                        <div class="order-card" data-order-id="<%= order.id %>"
                            data-order='<%- JSON.stringify(order) %>'>
                            <h3>Pedido #<%= order._id.substring(0, 8) %>
                            </h3>
                            <p><strong>Cliente:</strong>
                                <%= order.user.name %>
                            </p>
                            <p><strong>Distância:</strong> 5.2km</p>
                            <p style="display: flex; justify-content: flex-start;"> <strong>Endereço:</strong>
                                <%= order.endereco.rua %>, <%= order.endereco.numero %>

                                        <span style="margin-left: 30px;"
                                            class="order-status status-<%= order.status.toLowerCase().replace(' ', '-') %>">
                                            <%= order.status %>
                                        </span>
                            </p>

                        </div>
                        <% }); %>
                    <% } %>
        </div>
    </div>

    <!-- Coluna de Detalhes do Pedido Selecionado -->
    <div class="selected-order-container">
        <div id="map-placeholder">
            <span class="material-icons" style="font-size: 5rem; color: #bbb;">map</span>
        </div>
        <div id="selected-order-content">
            <div id="empty-state">
                <span class="material-icons">list_alt</span>
                <h3>Selecione um Pedido</h3>
            </div>
            <div id="order-details-info" style="display: none;">
                <h3>Detalhes do Pedido</h3>
                <div class="info-grid">
                    <div class="info-item" id="detail-client-name"></div>
                    <div class="info-item" id="detail-address"></div>
                    <!-- <div class="info-item" id="detail-distance"></div> -->
                    <div class="info-item" id="detail-status"></div>

                    <div style=" display: flex; align-items: center; justify-content: space-between; flex-direction: row;">

                        <input type="text" id="OtpToClient"
                            style="width: 45%; margin-right: 10px; padding: 6px; border: 1px solid #ccc; border-radius: 4px;"
                            placeholder="codigo enviado ao usuário..">

                        <button type="button" style="width: 55%;" class="btn btn-destaque" onclick="confirmarEntrega()">
                            Confirmar Entrega
                        </button>

                    </div>
                </div>
                <div class="delivery-actions">
                    <button type="button" class="btn btn-creatRota" onclick="tracarRota()">Traçar Rota</button>
                    <button class="btn btn-secundario" onclick="vernoMapa()">Ver no Mapa</button>
                    <button type="button" id="location-btn" class="btn btn-secundario" onclick="toggleLocationTracking()">Obter Localização</button>
                    <div class="info-item">
                        <strong>Minha Localização (Origem):</strong>
                        <input type="text" id="origin" style="width: 100%; padding: 6px; border: 1px solid #ccc; border-radius: 4px;" readonly>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script>

    let orderId;
    let address_client;
    let geocoder;
    let map;
    let directionsService;
    let directionsRenderer;
    let markerA = null;
    let markerB = null;
    // Definindo ícones. Pode ser URLs para imagens customizadas ou deixar null para o padrão.
    let iconA = null;
    let iconB = null;
    let locationWatchId = null;

    function tracarRota() {

        if (!markerA) {
            alert('Primeiro, obtenha sua localização clicando em "Obter Localização".');
            return;
        }

        if (!address_client) {
            alert('Selecione um pedido para definir o destino.');
            return;
        }

        const origin = markerA.getPosition();

        const destination = address_client;

        directionsService.route({
            origin: origin,
            destination: destination,
            travelMode: google.maps.TravelMode.DRIVING
        }, (response, status) => {
            if (status === 'OK') {
                directionsRenderer.setDirections(response);

                if (markerA) markerA.setMap(null);
                if (markerB) markerB.setMap(null);

                const leg = response.routes[0].legs[0];
                if (!markerB) {
                    markerB = new google.maps.Marker({
                        position: leg.end_location,
                        map: map,
                        icon: iconB,
                        title: 'Destino'
                    });
                } else {
                    markerB.setPosition(leg.end_location);
                    if (!markerB.getMap()) {
                        markerB.setMap(map);
                    }
                }

            } else {
                window.alert('Falha ao traçar a rota: ' + status);
            }
        });

    }

    function toggleLocationTracking() {
        const locationBtn = document.getElementById('location-btn');

        if (locationWatchId) {
            // Stop tracking
            navigator.geolocation.clearWatch(locationWatchId);
            locationWatchId = null;
            locationBtn.textContent = 'Obter Localização';
            locationBtn.classList.remove('btn-destaque');
            locationBtn.classList.add('btn-secundario');
            console.log("Rastreamento de localização parado.");
        } else {
            // Start tracking
            if (navigator.geolocation) {
                const options = {
                    enableHighAccuracy: true,
                    timeout: 10000, // 10 seconds
                    maximumAge: 0
                };

                locationWatchId = navigator.geolocation.watchPosition(position => {
                    console.log("Localização atualizada:", position);
                    const pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    if (markerA) {
                        markerA.setPosition(pos);
                    } else {
                        // First time getting location, center map and create marker
                        map.setCenter(pos);
                        map.setZoom(16);
                        markerA = new google.maps.Marker({
                            position: pos,
                            map: map,
                            icon: iconA,
                            title: 'Origem (Sua localização)'
                        });
                    }

                    // Update the origin input field with the address
                    reverseGeocode(pos, (address) => {
                        document.getElementById('origin').value = address || `${pos.lat.toFixed(6)}, ${pos.lng.toFixed(6)}`;
                    });

                    // Update button state
                    locationBtn.textContent = 'Parar Rastreamento';
                    locationBtn.classList.remove('btn-secundario');
                    locationBtn.classList.add('btn-destaque');

                }, error => {
                    console.error("Erro ao rastrear a localização: ", error);
                    alert("Não foi possível obter sua localização. Verifique as permissões do navegador.");
                    // Reset state if tracking fails to start
                    locationWatchId = null;
                    locationBtn.textContent = 'Obter Localização';
                    locationBtn.classList.remove('btn-destaque');
                    locationBtn.classList.add('btn-secundario');
                }, options);

                console.log("Iniciando rastreamento de localização...");

            } else {
                alert("Seu navegador não suporta geolocalização.");
            }
        }
    }

    function reverseGeocode(latLng, callback) {
        if (!geocoder) {
            callback(null);
            return;
        }

        geocoder.geocode({ location: latLng }, (results, status) => {
            if (status === 'OK' && results[0]) {

                console.log(results[0].formatted_address);

                callback(results[0].formatted_address);
            } else {
                callback(null);
            }
        })
    }

    function initMap() {

        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer();
        geocoder = new google.maps.Geocoder();

        const myLatLng = { lat: -22.8894, lng: -42.0286 };
        map = new google.maps.Map(document.getElementById("map-placeholder"), {
            zoom: 11,
            center: myLatLng,
        });
        directionsRenderer.setMap(map);

    };

    document.addEventListener('DOMContentLoaded', () => {
        const orderList = document.getElementById('order-list');
        const emptyState = document.getElementById('empty-state');
        const orderDetailsInfo = document.getElementById('order-details-info');

        if (!orderList) return;

        orderList.addEventListener('click', (event) => {
            const cardElement = event.target.closest('.order-card');
            if (!cardElement) return;

            // Remove a seleção de outros cartões;
            document.querySelectorAll('.order-card').forEach(card => card.classList.remove('selected'));
            // Adiciona a seleção ao cartão clicado;
            cardElement.classList.add('selected');

            // Esconde o estado de vazio e mostra os detalhes;
            emptyState.style.display = 'none';
            orderDetailsInfo.style.display = 'flex';
            orderDetailsInfo.style.flexDirection = 'column';
            orderDetailsInfo.style.flexGrow = '1';

            console.log("elemento clicado:", cardElement);
            // Preenche os detalhes;
            const orderData = JSON.parse(cardElement.dataset.order);
            document.getElementById('detail-client-name').innerHTML = `<strong>Cliente:</strong> ${orderData.user.name}`;
            document.getElementById('detail-address').innerHTML = `<strong>Endereço:</strong> ${orderData.endereco.rua}, ${orderData.endereco.numero}, ${orderData.endereco.bairro}`;
            document.getElementById('detail-status').innerHTML = `<strong>Status:</strong> <span class="order-status status-${orderData.status.toLowerCase().replace(' ', '-')}">${orderData.status}</span>`;

            orderId = orderData._id;
            address_client = `${orderData.endereco.rua} - ${orderData.endereco.bairro}, ${orderData.endereco.cidade}, ${orderData.endereco.estado}, ${orderData.endereco.cep}`;

            console.log('Endereço do cliente:', address_client);

            // Aqui você pode adicionar a lógica para o mapa e ações;
        });

        // Lógica para o caso de não haver pedidos
        const orders = JSON.parse('<%- JSON.stringify(orders) %>');
        if (orders.length === 0) {
            emptyState.innerHTML = `
                <span class="material-icons"> inbox </span>
                <h3>Nenhum Pedido Disponível</h3>
                <p>Volte mais tarde para verificar novas entregas.</p>`;
        }
    });

    async function vernoMapa() {
        if (!address_client) {
            alert('Por favor, selecione um pedido para ver o endereço no mapa.');
            return;
        }

        if (!geocoder) {
            alert('O serviço de geocodificação não está pronto.');
            return;
        }

        // Limpa a rota anterior do mapa para focar apenas no ponto de destino
        if (directionsRenderer) {
            directionsRenderer.setDirections({ routes: [] });
        }

        // Esconde o marcador de origem se ele estiver no mapa
        if (markerA) {
            markerA.setMap(null);
        }

        geocoder.geocode({ 'address': address_client }, (results, status) => {
            if (status === 'OK') {
                const destinationLocation = results[0].geometry.location;
                map.setCenter(destinationLocation);
                map.setZoom(16);

                if (!markerB) {
                    markerB = new google.maps.Marker({
                        position: destinationLocation,
                        map: map,
                        icon: iconB,
                        title: 'Destino'
                    });
                } else {
                    markerB.setPosition(destinationLocation);
                    markerB.setMap(map);
                }
            } else {
                alert('A geocodificação do endereço falhou pelo seguinte motivo: ' + status);
            }
        });
    }


    async function confirmarEntrega() {

        const confirmDeliverd = await fetch("/notifiqUserForShipped", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId })
        })

        console.log(confirmDeliverd);

    }



</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&libraries=places&callback=initMap">
</script>